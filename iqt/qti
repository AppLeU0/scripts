#!/usr/bin/env python

## Filename: qti [Query 'teh IRC]
## Concept:  Create database of IRC users and do something with it...
## Usage:    ./qti <irc-logfile>
## Author:   stryngs

import re
import os
import sqlite3 as lite
import sys

try:
    filename = sys.argv[1]
except:
    print 'Usage: ./qti <irc logfile>\n'
    sys.exit(1)

## Create byline list from logfile
with open(filename, 'r') as lFile:
	lineList = []
	for line in lFile:
		lineList.append(line)

## Create search functions
def join_search():
	expr = re.compile('.*\[.*?\]\s+has joined\s+#')
	return [hit for hit in lineList if expr.match(hit)]
def quit_search():
	expr = re.compile('.*\[.*?\]\s+has quit\s+\[')
	return [hit for hit in lineList if expr.match(hit)]

## Create list of successful parsings
joinList = list(join_search())
quitList = list(quit_search())

## Declare join columns
sample = joinList[0].split(' ')
count = 0
for i in sample:
	print '%s:  %s' % (count, i)
	count += 1
print 'You should see a sample join line broken down by columns above'
jNick = raw_input('username column >')
jWhois = raw_input('logged in from column > ')
jChan = raw_input('channel column > ')
print ''
jNick = int(jNick)
jWhois = int(jWhois)
jChan = int(jChan)

## Declare quit columns
sample = quitList[0].split(' ')
count = 0
for i in sample:
	print '%s:  %s' % (count, i)
	count += 1
print 'You should see a sample quit line broken down by columns above'
qNick = raw_input('username column >')
qWhois = raw_input('logged in from column > ')
print ''
qNick = int(qNick)
qWhois = int(qWhois)

## Test db connection and prep if new db
con = None
try:
	con = lite.connect('irc-logs.sqlite')
	db = con.cursor()
	if con:
		db.execute("CREATE TABLE IF NOT EXISTS irc_join(Id INT, nick TEXT, whois TEXT, chan TEXT)")
		db.execute("CREATE TABLE IF NOT EXISTS irc_quit(Id INT, nick TEXT, whois TEXT)")
		con.close()
		con = None
except lite.Error, e:
	print "Error %s:" % e.args[0]
	sys.exit(1)

## JOIN Stuff
## Create tempfile of desired info
with open ('j.tmp', 'w') as jFile:
	for i in joinList:
		who = i.split(' ')[jNick]
		where = i.split(' ')[jWhois]
		where = re.sub('(^\[|]$)', '', where)
		chan = i.split(' ')[jChan]
		chan = re.sub('\\n$', '', chan)
		jFile.write(who + " " + where + " " + chan + "\n")

## Create byline list of j.tmp
with open ('j.tmp', 'r') as jTmp:
	jTmpLst = []
	for line in jTmp:
		jTmpLst.append(line)

## Search and remove duplicates from jTmpLst
joinListSort = sorted(set(jTmpLst))

## QUIT Stuff
## Create tempfile of desired info
with open ('q.tmp', 'w') as qFile:
	for i in quitList:
		who = i.split(' ')[qNick]
		where = i.split(' ')[qWhois]
		where = re.sub('(^\[|]$)', '', where)
		qFile.write(who + " " + where + "\n")

## Create byline list of q.tmp
with open('q.tmp', 'r') as qTmp:
	qTmpLst = []
	for line in qTmp:
		qTmpLst.append(line)

## Search and remove duplicates from qTmpLst
quitListSort = sorted(set(qTmpLst))

## Open db and begin work
con = lite.connect('irc-logs.sqlite')
db = con.cursor()

## Update tables
with con:
## Insert join data
	counter=1
	for i in joinListSort:
		who = i.split(' ')[0]
		where = i.split(' ')[1]
		where = re.sub('(^\[|]$)', '', where)
		chan = i.split(' ')[2]
		chan = re.sub('\\n$', '', chan)
		db.execute("INSERT INTO irc_join VALUES(?, ?, ?, ?);", (counter, who, where, chan))
		counter += 1

## Insert quit data
	counter=1
	for i in quitListSort:
		who = i.split(' ')[0]
		where = i.split(' ')[1]
		where = re.sub('(^\[|]$)', '', where)
		db.execute("INSERT INTO irc_quit VALUES(?, ?, ?);", (counter, who, where))
		counter += 1

## Cleanup
os.remove('j.tmp')
os.remove('q.tmp')
print 'Finished!'
print 'Filename: irc-logs.sqlite'
print ''
sys.exit(0)
