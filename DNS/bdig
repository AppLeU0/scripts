#!/usr/bin/env python
import sqlite3 as lite
import csv, sys, os, re, shutil

'''
PREP THE ENVIRONMENT
'''
## Create BaseDir
bDir = os.getcwd()

## Name the DIG_INFOs directory
dDir = raw_input('DIG_INFOs Directory? [%s/DIG_INFOs]\n' % bDir)
if not dDir:
	dDir = '%s/DIG_INFOs' % bDir
else:
	print ''

'''
PREP THE DB
'''
## Create DB
dbName = raw_input('Desired name for DB? [%s/axfr.sqlite]\n' % bDir)
if not dbName:
	dbName = '%s/axfr.sqlite' % bDir
else:
	print ''

wDir = raw_input('Desired name for working directory? [%s/PARSER_FILEs]\n' % bDir)
if not wDir:
	wDir = '%s/PARSER_FILEs' % bDir
else:
	print ''

if os.path.isdir(wDir):
	wExists = raw_input('%s already exists, remove and continue? [y/N]\n' % wDir)
	if not wExists:
		exit(1)
	elif wExists == 'n':
		exit(1)
	elif wExists == 'N':
		exit(1)
	else:
		print 'Removing and continuing'
		print ''
		shutil.rmtree(wDir)

if os.path.isfile(dbName):
	dFile = raw_input('%s already exists\nUpdate and continue? [y/N]\n' % dbName)
	if not dFile:
		exit(1)
	elif dFile == 'n':
		exit(1)
	elif dFile == 'N':
		exit(1)
	else:
		print '\nUpdating %s and continuing' % dbName

print 'Proceeding to build %s\n' % dbName
con = lite.connect(dbName)
db = con.cursor()
if con:
	db.execute("CREATE TABLE IF NOT EXISTS axfr(dm TEXT, own TEXT, ttl TEXT, rr TEXT, data TEXT)")
	db.execute("CREATE TABLE IF NOT EXISTS dm2ns(dm TEXT, ns TEXT)")
	db.execute("CREATE TABLE IF NOT EXISTS ns2dm(ns TEXT, dm TEXT)")
	db.execute("CREATE TABLE IF NOT EXISTS scanned(dm TEXT)")
	db.execute("CREATE TABLE IF NOT EXISTS domains(dm TEXT)")
	db.execute("CREATE TABLE IF NOT EXISTS nameservers(ns TEXT)")
	con.close()
	con = None


'''
PREP THE FILES
'''
## Create directory list for dDir
dList = os.listdir(dDir)

## Create working and temporary directory
os.mkdir('PARSER_FILEs')
wDir = '%s/PARSER_FILEs' % bDir
os.mkdir('%s/TMP_FILEs' % wDir)
tDir = '%s/TMP_FILEs' % wDir

## Rip the axfr from the largest NS file for each domain to a domain specific file and to the main file
## Ignore any blank lines or ;'s
expr = re.compile('^;')
with open('%s/axfr.lst' % wDir, 'w') as aFile:
	for domain in dList:
		nsList = os.listdir('%s/%s' % (dDir, domain))
		lFile = 0
		nServer = ""
		for ns in nsList:
			sz = os.path.getsize('%s/%s/%s' % (dDir, domain, ns))
			if sz > lFile:
				lFile = sz
				nServer = ns
		with open('%s/%s/%s' % (dDir, domain, nServer), 'r') as iPut:
			with open('%s/%s' % (tDir, domain), 'w') as oFile:
				iList = iPut.read().splitlines()
				for line in iList:
					if line and not expr.match(line):
						oFile.write(domain + ' ' + line + '\n')
						aFile.write(domain + ' ' + line + '\n')

## Remove empty files
for i in os.listdir(tDir):
	sz = os.path.getsize('%s/%s' % (tDir, i))
	if sz == 0:
		os.remove('%s/%s' % (tDir, i))

## Reassign dList as a successful list
dList = os.listdir(tDir)

## Create domains, dm2ns, ns2dm and nameservers lists
domainsFile = open('%s/domains.lst' % wDir, 'w')
dm2nsFile = open('%s/dm2ns.lst' % wDir, 'w')
ns2dmFile = open('%s/ns2dm.lst' % wDir, 'w')
nameserversFile = open('%s/nameservers.lst' % wDir, 'w')
for domain in dList:
	nsList = os.listdir('%s/%s' % (dDir, domain))
	domainsFile.write('%s' % (domain.lower()) + '\n')
	for ns in nsList:
		dm2nsFile.write('%s,%s' % (domain.lower(), ns.lower()) + '\n')
		ns2dmFile.write('%s,%s' % (ns.lower(), domain.lower()) + '\n')
		nameserversFile.write('%s' % (ns.lower()) + '\n')
dm2nsFile.close()
ns2dmFile.close()
domainsFile.close()
nameserversFile.close()


'''
Update the tables
'''
def sColumn(File, Table):
	iFile = open(File, 'r')
	while True:
		iRow = iFile.readline().rstrip()
		if not iRow:
			break
		db.execute("INSERT INTO %s VALUES(?);" % Table, (iRow,))
	iFile.close()

def dColumn(File, Table):
	with open(File, 'r') as iFile:
		rows = csv.reader(iFile, delimiter=',')
		con.executemany("INSERT INTO '%s' VALUES (?, ?)" % Table, rows)

## Open db and begin work
con = lite.connect(dbName)
con.text_factory = str
db = con.cursor()

with con:
	### Insert data table
	aFile = open('%s/axfr.lst' % wDir, 'r')
	while True:
		row = aFile.readline().rstrip()
		if not row:
			break
		dmRow = row.split()[0].lower()
		ownRow = row.split()[1].lower()
		ttlRow = row.split()[2]
		rrRow = row.split()[4]
		data = row.split()[5:]
		dataRow = ' '.join(map(str, data))
		db.execute("INSERT INTO axfr VALUES(?, ?, ?, ?, ?);", (dmRow, ownRow, ttlRow, rrRow, dataRow))
	aFile.close()
	
	## Insert Tables
	dColumn('%s/dm2ns.lst' % wDir, 'dm2ns')
	dColumn('%s/ns2dm.lst' % wDir, 'ns2dm')
	sColumn('nTgts.lst', 'scanned')
	sColumn('%s/domains.lst' % wDir, 'domains')
	sColumn('%s/nameservers.lst' % wDir, 'nameservers')

'''
CLEANUP
'''
## Remove tmp directory
shutil.rmtree(wDir)


###select COUNT(*) from axfr;
###select COUNT(*) from dm2ns;
###select COUNT(*) from ns2dm;
###select COUNT(*) from scanned;

