#!/usr/bin/env python

## Filename: qti [Query 'teh IRC]
## Concept:  Create database of IRC users and do something with it...
## Usage:    ./qti <irc-logfile>
## Author:   stryngs
## Notes:
	## I've only tested this with irssi logs

import re
import os
import sqlite3 as lite
import sys

try:
    filename = sys.argv[1]
except:
    print 'Usage: ./qti <irc logfile>\n'
    sys.exit(1)

## Test db connection and prep if new db
con = None
try:
	con = lite.connect('irc-logs.sqlite')
	db = con.cursor()
	if con:
		db.execute("CREATE TABLE IF NOT EXISTS irc_join(Id INT, nick TEXT, whois TEXT, chan TEXT)")
		db.execute("CREATE TABLE IF NOT EXISTS irc_quit(Id INT, nick TEXT, whois TEXT)")
		con.close()
		con = None

except lite.Error, e:
	print "Error %s:" % e.args[0]
	sys.exit(1)

## Open logfile
log = open(filename, 'r')

## Create byline list of file
lineList = []
for line in log:
	lineList.append(line)

## Closeout the logfile
log.close()

##########################
## Parse out who joined ##
##########################

## Create join search func
def join_search():
	expr = re.compile('.*\[.*?\]\s+has joined\s+#')
	return [hit for hit in lineList if expr.match(hit)]

## Create list of successful parsings for joins
joinList = list(join_search())

## Create tempfile of desired info
with open ('j.tmp', 'w') as jFile:
	for i in joinList:
		who = i.split(' ')[2]
		where = i.split(' ')[3]
		where = re.sub('(^\[|]$)', '', where)
		chan = i.split(' ')[6]
		chan = re.sub('\\n$', '', chan)
		jFile.write(who + " " + where + " " + chan + "\n")


## Create byline list of j.tmp
with open ('j.tmp', 'r') as jTmp:
	jTmpLst = []
	for line in jTmp:
		jTmpLst.append(line)

## Search and remove duplicates from jTmpLst
joinListSort = sorted(set(jTmpLst))

## Create quit search func
def quit_search():
	expr = re.compile('.*\[.*?\]\s+has quit\s+\[')
	return [hit for hit in lineList if expr.match(hit)]

########################
## Parse out who quit ##
########################

## Create list of successful parsings for quits
quitList = list(quit_search())

## Create tempfile of desired info
with open ('q.tmp', 'w') as qFile:
	for i in quitList:
		who = i.split(' ')[2]
		where = i.split(' ')[3]
		where = re.sub('(^\[|]$)', '', where)
		qFile.write(who + " " + where + "\n")

## Create byline list of q.tmp
with open('q.tmp', 'r') as qTmp:
	qTmpLst = []
	for line in qTmp:
		qTmpLst.append(line)

## Search and remove duplicates from qTmpLst
quitListSort = sorted(set(qTmpLst))

## Open db and begin work
con = lite.connect('irc-logs.sqlite')
db = con.cursor()

## Update tables
with con:
## Insert join data
	counter=1
	for i in joinListSort:
		who = i.split(' ')[0]
		where = i.split(' ')[1]
		where = re.sub('(^\[|]$)', '', where)
		chan = i.split(' ')[2]
		chan = re.sub('\\n$', '', chan)
		db.execute("INSERT INTO irc_join VALUES(?, ?, ?, ?);", (counter, who, where, chan))
		counter += 1

## Insert quit data
	counter=1
	for i in quitListSort:
		who = i.split(' ')[0]
		where = i.split(' ')[1]
		where = re.sub('(^\[|]$)', '', where)
		db.execute("INSERT INTO irc_quit VALUES(?, ?, ?);", (counter, who, where))
		counter += 1

## Cleanup
os.remove('j.tmp')
os.remove('q.tmp')
print 'Finished!'
print 'Filename: irc-logs.sqlite'
print ''
sys.exit(0)
