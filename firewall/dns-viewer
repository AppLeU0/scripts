#!/usr/bin/python

"""
Useful for viewing DNSQR requests

cat viewer.log | grep src | cut -d: -f2 | cut -d- -f1 | sort -u
"""

import logging, os, signal, subprocess, sys, time
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *

def crtlC(ipDict):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print '\n\ncrtl + c detected.  Stopping dns-viewer'
        print 'Final stats:\n%s' % ipDict
        sys.exit(0)
    return tmp


def packetParser(ipDict):
    """View the info from DNSQR"""
    def engine(packet):
        if ipDict.get(packet[IP].src) is None:
            ipDict.update({packet[IP].src: 0})
        else:
            pVal = ipDict.get(packet[IP].src)
            ipDict.update({packet[IP].src: pVal + 1})
        tm = time.time()
        src = 'src: %s -- %s' % (packet[IP].src,
                                 ipDict.get(packet[IP].src))
        dst = 'dst: %s' % packet[IP].dst
        opcode = 'opcode: %s' % symString(packet[DNS],
                                          packet[DNS].opcode,
                                          'opcode')
        query = 'query: %s' % symString(packet[DNSQR],
                                        packet[DNSQR].qtype,
                                        'qtype')
        qname = 'qname: %s' % packet[DNSQR].qname

        print tm
        print src
        print dst
        print opcode
        print query
        print qname
        print ''

        with open('viewer.log', 'a') as oFile:
            oFile.write(str(tm) + '\n' + 
                        src + '\n' +
                        dst + '\n' +
                        opcode + '\n' +
                        query + '\n' +
                        qname + '\n\n')
    return engine

def symString(packet, pField, fString):
    """Shows the symblic string for a given field
    Where p is UDP(), and you want p.dport symbolically:
        symString(p, p.dport, 'dport')
    
    Where p is UDP()/DNS(), and you want p[DNS].opcode symbolically:
        symString(p[DNS], p[DNS].opcode, 'opcode')
    """
    return packet.get_field(fString).i2repr(packet, pField)


if __name__ == '__main__':
    ## Signal handler
    ipDict = {}
    signal_handler = crtlC(ipDict)
    signal.signal(signal.SIGINT, signal_handler)
    
    ## Launch
    pHandler = packetParser(ipDict)
    sniff(iface = 'eth0', prn=pHandler, lfilter = lambda x: x.haslayer('DNSQR'), store = 0)
