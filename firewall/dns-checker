#!/usr/bin/python

"""
Sort DNSQR by src and dst

src hits:
    cat checker.log | grep src | cut -d: -f2 | cut -d- -f1| sort -u

dst hits:
    cat checker.log | grep dst | cut -d: -f2 | cut -d- -f1| sort -u
"""

import logging, os, netifaces, signal, subprocess, sys, time
import sqlite3 as lite
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)
from scapy.all import *

class SQL(object):
    """Use SQL to store the packets"""
    
    def __init__(self):
        self.con = lite.connect('checker.sqlite')
        self.con.text_factory = str
        self.db = self.con.cursor()
        
        ## Generate src table        
        self.db.execute('CREATE TABLE IF NOT EXISTS\
                            "packets"("num" INT,\
                                      "time" TEXT,\
                                      "type" TEXT,\
                                      "scount" INT,\
                                      "dcount" INT,\
                                      "smac" TEXT,\
                                      "dmac" TEXT,\
                                      "sip" TEXT,\
                                      "dip" TEXT,\
                                      "pkt" BLOB);')
        self.con.commit()


def crtlC(srcIPs, dstIPs):
    """Handle CTRL+C."""
    def tmp(signal, frame):
        print '\n\ncrtl + c detected.  Stopping dns-checker'
        print 'Final stats:\nsrc: %s\ndst: %s' % (srcIPs, dstIPs)
        sys.exit(0)
    return tmp


def packetParser(sql, myIP, srcIPs, srcDst, dstIPs, dstSrc):
    """Notate and store what is going on with DNSQRs"""
    def engine(packet):
        global pNum
        pNum += 1
        tm = str(time.time())
        
        ## Deal with SRC
        if packet[IP].src == myIP:
            
            ## Log the src and count
            pType = 'src'
            if srcIPs.get(packet[IP].src) is None:
                sCount = 1
                srcIPs.update({packet[IP].src: sCount})
            else:
                sCount = srcIPs.get(packet[IP].src) + 1
                srcIPs.update({packet[IP].src: sCount})
                
            ## Log the dst and count
            if srcDst.get(packet[IP].dst) is None:
                dCount = 1
                srcDst.update({packet[IP].dst: dCount})
            else:
                dCount = srcDst.get(packet[IP].dst) + 1
                srcDst.update({packet[IP].dst: dCount})

            ## Generate output
            oPut = 'dst: %s -- %s / %s -- %s' % (packet[IP].dst,
                                                 str(srcDst.get(packet[IP].dst)),
                                                 str(srcIPs.get(packet[IP].src)),
                                                 pNum)

        ## Deal with DST
        else:
            
            ## Log the dst and count
            pType = 'dst'
            if dstIPs.get(packet[IP].dst) is None:
                dCount = 1
                dstIPs.update({packet[IP].dst: dCount})
            else:
                dCount = dstIPs.get(packet[IP].dst) + 1
                dstIPs.update({packet[IP].dst: dCount})
                
            ## Log the src and count
            if dstSrc.get(packet[IP].src) is None:
                sCount = 1
                dstSrc.update({packet[IP].src: sCount})
            else:
                sCount = dstSrc.get(packet[IP].src) + 1
                dstSrc.update({packet[IP].src: sCount})

            ## Generate the output
            oPut = 'src: %s -- %s / %s -- %s' % (packet[IP].src,
                                                 str(dstSrc.get(packet[IP].src)),
                                                 str(dstIPs.get(packet[IP].dst)),
                                                 pNum)


        ## Store the packet
        sql.db.execute('INSERT INTO\
                            "packets"\
                        VALUES(?,\
                               ?,\
                               ?,\
                               ?,\
                               ?,\
                               ?,\
                               ?,\
                               ?,\
                               ?,\
                               ?);',\
                              (pNum,\
                               tm,\
                               pType,\
                               sCount,\
                               dCount,\
                               packet[Ether].src,\
                               packet[Ether].dst,\
                               packet[IP].src,\
                               packet[IP].dst,\
                               hexstr(str(packet), onlyhex = 1)))

        ## Print the packet
        print oPut

        ## Log it
        with open('checker.log', 'a') as oFile:
            oFile.write(oPut + '\n')
        
        ## Commit to DB
        sql.con.commit()
    return engine


if __name__ == '__main__':
    ## Grab the IP
    try:
        myIP = netifaces.ifaddresses(sys.argv[1])[2][0]['addr']
    except:
        print 'Usage:\ndns-checker <NIC>\n'
        sys.exit(1)
    
    ## Store the counts
    pNum = 0
    srcIPs = {}
    srcDst = {}
    dstIPs = {}
    dstSrc = {}
    
    ## Create the DB
    sql = SQL()
    
    ## Signal handler
    signal_handler = crtlC(srcIPs, dstIPs)
    signal.signal(signal.SIGINT, signal_handler)
    
    ## Launch
    pHandler = packetParser(sql, myIP, srcIPs, srcDst, dstIPs, dstSrc)
    sniff(iface = sys.argv[1], prn=pHandler, lfilter = lambda x: x.haslayer('DNSQR'), store = 0)
