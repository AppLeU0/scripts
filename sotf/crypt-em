#!/usr/bin/env python
#import os, subprocess, sys
import os, sys

## Filename: crypt-em
## Author:   stryngs
## Version:  0.6
## Concept:  Secrecy on the fly using GPG!
## Kudos:    Based on the original concept by arist0v
## ToDo:
	# Directory checks for non native GPG environment location
	# Multi-chat capabilties
	# GPG Keys class
	## Add padding
	## fwd secrecy
		# subkey refresh?
	# mode change
	# For keys.py PyNaCl class
		# choose which key to import or save
		# choose name of key to import or save

def main():
	'''
	This sets up the environment for Secrecy on The Fly
	
	It uses the library classes and functions according to what arguments are provided.
	'''
	try:
		tCrypto = sys.argv[1]
		mode = sys.argv[2]
	except:
		print './crypt-em -g -i for GPG based IRC mode'
		print './crypt-em -g -s for GPG based shell mode'
		print ''
		print './crypt-em -p -i for PyNaCl based IRC mode'
		print './crypt-em -p -s for PyNaCl based shell mode'
		sys.exit(1)

	## Set the length to chop characters for IRC
	mLen = 440

	if tCrypto == '-g':
		from lib.chat import GPG_chat
		from lib.crypto_env import GPG_env
		from lib.keys import GPG_keys

		## Set environment
		cType = GPG_env()
		gpg, hDir = cType.env()

		## Deal with keys
		GPG = GPG_keys()
		you, me, gPass = GPG.key_select(gpg, mode, mLen)

		## Chat
		chat = GPG_chat()
		while True:
			chat.gpg(gpg, mode, you, me, gPass, mLen)

	elif tCrypto == '-p':
		from lib.chat import PyNaCl_chat
		from lib.crypto_env import PyNaCl_env
		from lib.keys import PyNaCl_keys

		## Check environment
		env_check = PyNaCl_env
		env_check.env

		## Deal with keys
		PYNACL = PyNaCl_keys()

		## Box it up
		myBox, privObj, partner_enc = PYNACL.key_select()

		## Chat
		chat = PyNaCl_chat()
		while True:
			chat.pynacl(myBox, mode, privObj, partner_enc, mLen)

if __name__ == '__main__':
	main()
